{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","OutputConversions","output","number","unit","cupToTbsp","tbspToGram","tbsp","gram","push","cup","calculateConversion","this","props","convertNumber","convertMeasurement","length","id","class","type","value","readOnly","React","Component","SearchBar","handleConvertNumberChange","bind","handleConverMeasurementChange","e","onConvertNumberChange","target","onConvertMeasurementChange","placeholder","onChange","name","ConverterTable","state","setState","href","ReactDOM","render","StrictMode","Helmet","charset","content","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9170dd72.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useLayoutEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { Helmet } from 'react-helmet';\n\nfunction calculateConversion(number, unit) {\n  const cupToTbsp = {tbsp:16}\n  const tbspToGram = {gram: 15}\n\n  const output = []\n  if (unit === 'cup'){\n    const tbsp = cupToTbsp.tbsp\n    const gram = tbsp * tbspToGram.gram\n    output.push({cup: 1*number, tbsp: tbsp*number, gram:  gram*number});\n  }\n  else if (unit === 'tbsp'){\n    const cup = 1/cupToTbsp.tbsp\n    const gram = tbspToGram.gram\n    output.push({tbsp:1*number, cup: cup*number, gram: gram*number})\n  }\n  else {\n    const tbsp = 1/tbspToGram.gram\n    const cup = tbsp * 1/cupToTbsp.tbsp\n    output.push({gram: 1*number, tbsp: tbsp*number, cup: cup*number})\n  }\n  return output\n}\n\nclass OutputConversions extends React.Component {\n  render(){\n    const convertNumber = this.props.convertNumber;\n    const convertMeasurement = this.props.convertMeasurement;\n    const output = calculateConversion(convertNumber, convertMeasurement)\n\n    debugger;\n    if (output.length === 0) {\n      return(\n        <div id=\"outputMeasurements\">\n          <div class=\"input\"> \n            <input type='text' id='cup' value={0} readOnly></input> cup\n          </div>\n          <div class=\"input\"> \n            <input type='text' id='grams' value={0} readOnly></input> grams\n          </div>\n          <div class=\"input\"> \n            <input type='text' id='tablespoon' value={0} readOnly></input> tbsps\n          </div>\n        </div>\n      );\n    }\n    else {\n      let cup = (output[0].cup );\n      let gram = (output[0].gram );\n      let tbsp = (output[0].tbsp );\n  \n      return(\n        <div id=\"outputMeasurements\">\n          <div class=\"input\"> \n            <input type='text' id='cup' value={cup || 0} readOnly></input> cup\n          </div>\n          <div class=\"input\"> \n            <input type='text' id='grams' value={gram || 0} readOnly></input> grams\n          </div>\n          <div class=\"input\"> \n            <input type='text' id='tablespoon' value={tbsp || 0} readOnly></input> tbsps\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleConvertNumberChange = this.handleConvertNumberChange.bind(this);\n    this.handleConverMeasurementChange = this.handleConverMeasurementChange.bind(this);\n  }\n\n  handleConvertNumberChange(e) {\n    this.props.onConvertNumberChange(e.target.value);\n  }\n\n  handleConverMeasurementChange(e) {\n    this.props.onConvertMeasurementChange(e.target.value);\n  }\n\n  render(){\n    return(\n      <form>\n        <input \n          id=\"inputData\" \n          type='number' \n          placeholder=\"Enter number...\"\n          value={this.props.convertNumber}\n          onChange={this.handleConvertNumberChange}\n        />\n      <select \n        name='measurements' \n        id='measurements'\n        value={this.props.convertMeasurement}\n        onChange={this.handleConverMeasurementChange}\n        >\n        <option value='gram'>grams</option>\n        <option value='cup'>cup</option>\n        <option value='tbsp'>tbsp</option>\n      </select>\n      </form>\n    );\n  }\n}\n\nclass ConverterTable extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      convertNumber: '',\n      convertMeasurement: 'gram' \n    };\n\n    this.handleConvertNumberChange = this.handleConvertNumberChange.bind(this);\n    this.handleConverMeasurementChange = this.handleConverMeasurementChange.bind(this);\n  }\n\n  handleConvertNumberChange(convertNumber){\n    this.setState({\n      convertNumber: convertNumber\n    });\n  }\n\n  handleConverMeasurementChange(convertMeasurement){\n    this.setState({\n      convertMeasurement: convertMeasurement\n    });\n  }\n  \n  render() {\n    return (\n    <div>\n      <h1>All Purpose Measurements</h1>\n      <p>Ever need to switch in between measurements and you \n        just don't know the conversion? Well never again!</p>\n      <div class=\"displayData\">\n        <SearchBar\n        convertNumber={this.state.convertNumber}\n        onConvertNumberChange={this.handleConvertNumberChange}\n        convertMeasurement={this.state.convertMeasurement}\n        onConvertMeasurementChange={this.handleConverMeasurementChange}/>\n        <OutputConversions\n        convertNumber={this.state.convertNumber}\n        convertMeasurement={this.state.convertMeasurement}/>\n      </div>\n      <div class=\"footer\">\n        <p>Check out the source code <a href=\"https://github.com/leevtori/baking-converter.git\">here</a></p>\n      </div>\n    </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Helmet>\n      <title>Baking Measurements</title>\n      <meta charset=\"utf-8\" />\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\n    </Helmet>\n   <ConverterTable></ConverterTable>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}